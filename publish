#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get current version from package.json
get_current_version() {
    node -p "require('./package.json').version"
}

# Bump version and return new version
bump_version() {
    local bump_type=$1
    local current_version=$(get_current_version)
    local new_version=""

    # Parse current version
    IFS='.' read -ra VERSION_PARTS <<< "$current_version"
    local major=${VERSION_PARTS[0]}
    local minor=${VERSION_PARTS[1]}
    local patch=${VERSION_PARTS[2]}

    case $bump_type in
        patch)
            patch=$((patch + 1))
            new_version="${major}.${minor}.${patch}"
            ;;
        minor)
            minor=$((minor + 1))
            patch=0
            new_version="${major}.${minor}.${patch}"
            ;;
        major)
            major=$((major + 1))
            minor=0
            patch=0
            new_version="${major}.${minor}.${patch}"
            ;;
        *)
            echo -e "${RED}Invalid bump type. Use: patch, minor, or major${NC}"
            exit 1
            ;;
    esac

    # Update package.json
    node -e "
        const fs = require('fs');
        const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
        pkg.version = '$new_version';
        fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 4) + '\n');
    "

    echo "$new_version"
}

# Confirm action with user
confirm() {
    local message=$1
    echo -e "${YELLOW}$message${NC}"
    read -p "Continue? (Y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo -e "${RED}Cancelled.${NC}"
        exit 1
    fi
}

# Main script
case "$1" in
    -r|--redo)
        echo -e "${BLUE}=== REDO LAST RELEASE ===${NC}"
        CURRENT_VERSION=$(get_current_version)
        echo -e "Current version: ${GREEN}v$CURRENT_VERSION${NC}"

        confirm "This will create a new commit for the same version and trigger the release workflow."

        git commit --allow-empty -m "release v$CURRENT_VERSION"
        echo -e "${GREEN}âœ“ Created empty commit for release v$CURRENT_VERSION${NC}"

        git push
        echo -e "${GREEN}âœ“ Pushed to remote${NC}"
        echo -e "${BLUE}ðŸš€ Release workflow should start shortly for v$CURRENT_VERSION${NC}"
        ;;

    "")
        echo -e "${BLUE}=== NEW RELEASE ===${NC}"

        # Run build first and only proceed if successful
        echo -e "${BLUE}Building project...${NC}"
        if ! bun run build; then
            echo -e "${RED}Build failed. Please fix the build errors before proceeding.${NC}"
            exit 1
        fi
        echo -e "${GREEN}âœ“ Build successful${NC}"
        echo

        CURRENT_VERSION=$(get_current_version)
        echo -e "Current version: ${GREEN}v$CURRENT_VERSION${NC}"
        echo
        echo "Select version bump type:"
        echo "1) patch (v$CURRENT_VERSION â†’ v$(node -e "
            const pkg = require('./package.json');
            const [major, minor, patch] = pkg.version.split('.').map(Number);
            console.log(major + '.' + minor + '.' + (patch + 1));
        ")) [default]"
        echo "2) minor (v$CURRENT_VERSION â†’ v$(node -e "
            const pkg = require('./package.json');
            const [major, minor, patch] = pkg.version.split('.').map(Number);
            console.log(major + '.' + (minor + 1) + '.0');
        "))"
        echo "3) major (v$CURRENT_VERSION â†’ v$(node -e "
            const pkg = require('./package.json');
            const [major, minor, patch] = pkg.version.split('.').map(Number);
            console.log((major + 1) + '.0.0');
        "))"
        echo
        read -p "Enter choice (1/2/3) [default: 1]: " -n 1 -r
        echo

        # Set default to patch (option 1) if no input or invalid input
        if [[ -z "$REPLY" ]] || [[ ! "$REPLY" =~ ^[1-3]$ ]]; then
            REPLY="1"
        fi

        case $REPLY in
            1)
                BUMP_TYPE="patch"
                ;;
            2)
                BUMP_TYPE="minor"
                ;;
            3)
                BUMP_TYPE="major"
                ;;
            *)
                echo -e "${RED}Invalid choice. Cancelled.${NC}"
                exit 1
                ;;
        esac

        NEW_VERSION=$(bump_version $BUMP_TYPE)
        echo -e "${GREEN}âœ“ Version bumped to v$NEW_VERSION${NC}"

        confirm "This will commit the version bump and push 'release v$NEW_VERSION' to trigger the release workflow."

        git add package.json
        git commit -m "release v$NEW_VERSION"
        echo -e "${GREEN}âœ“ Committed version bump${NC}"

        git push
        echo -e "${GREEN}âœ“ Pushed to remote${NC}"
        echo -e "${BLUE}ðŸš€ Release workflow should start shortly for v$NEW_VERSION${NC}"
        ;;

    -h|--help)
        echo "Usage: $0 [OPTIONS]"
        echo
        echo "Publish script for automated releases"
        echo
        echo "OPTIONS:"
        echo "  (no args)    Interactive release - build, bump version, commit, and push"
        echo "  -r, --redo   Redo last release without version bump"
        echo "  -h, --help   Show this help message"
        echo
        echo "Examples:"
        echo "  $0           # Interactive new release"
        echo "  $0 -r        # Redo current version release"
        ;;

    *)
        echo -e "${RED}Unknown option: $1${NC}"
        echo "Use -h or --help for usage information"
        exit 1
        ;;
esac